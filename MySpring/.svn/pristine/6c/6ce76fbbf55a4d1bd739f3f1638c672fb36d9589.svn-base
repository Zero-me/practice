package com.zero.websocket ;

import java.io.IOException ;
import java.util.concurrent.CopyOnWriteArraySet ;
import javax.websocket.OnClose ;
import javax.websocket.OnError ;
import javax.websocket.OnMessage ;
import javax.websocket.OnOpen ;
import javax.websocket.Session ;
import javax.websocket.server.ServerEndpoint ;
import org.slf4j.Logger ;
import org.slf4j.LoggerFactory ;
import org.springframework.stereotype.Component ;

@Component
@ServerEndpoint("/api/websocket")
public class WebSocketServer {
	
	private static final Logger	logger = LoggerFactory.getLogger(WebSocketServer.class) ;
	// 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。可选
	private static int onlineCount	= 0 ;
	
	// concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。必须
	private static CopyOnWriteArraySet<WebSocketServer>	webSocketSet = new CopyOnWriteArraySet<WebSocketServer>() ;
	
	// 与某个客户端的连接会话，需要通过它来给客户端发送数据。必须
	private Session	session ;
	
	/**
	 * 连接建立成功调用的方法
	 */
	@OnOpen
	public void onOpen(Session session) {
		this.session = session ;
		webSocketSet.add(this) ;     // 加入set中
		addOnlineCount() ;           // 在线数加1
		logger.info("[onOpen] onlineCount=" + getOnlineCount()) ;
		try {
			sendMessage("连接成功") ;
		} catch (IOException e) {
			logger.info("[onOpen]WebSocket IO异常") ;
		}
	}
	
	/**
	 * 连接关闭调用的方法
	 */
	@OnClose
	public void onClose() {
		webSocketSet.remove(this) ;  // 从set中删除
		subOnlineCount() ;           // 在线数减1
		logger.info("[onClose] onlineCount=" + getOnlineCount()) ;
	}
	
	/**
	 * 收到客户端消息后调用的方法
	 *
	 * @param message 客户端发送过来的消息
	 */
	@OnMessage
	public void onMessage(String message, Session session) {
		logger.info("[onMessage]   [" +session.getId() +"]"+ message) ;
		// 群发消息
		try {
			sendInfo("  [" + session.getId() + "] : " + message);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}
	
	/**
	 * @param session
	 * @param error
	 */
	@OnError
	public void onError(Session session, Throwable error) {
		logger.error("[onError] " + error.getMessage()) ;
		onClose() ;
	}
	
	/**
	 * 实现服务器主动推送
	 */
	public void sendMessage(String message) throws IOException {
		this.session.getBasicRemote().sendText(message) ;
	}
	
	/**
	 * 群发自定义消息
	 */
	public static void sendInfo(String message) throws IOException {
		logger.info("[sendInfo]  " + message) ;
		for (WebSocketServer item : webSocketSet) {
			try {
				item.sendMessage(message) ;
			} catch (IOException e) {
				continue ;
			}
		}
	}
	
	public static synchronized int getOnlineCount() {
		return onlineCount ;
	}
	
	public static synchronized void addOnlineCount() {
		WebSocketServer.onlineCount++ ;
	}
	
	public static synchronized void subOnlineCount() {
		WebSocketServer.onlineCount-- ;
	}
	
}
